<?php

/**
 * @file
 * Provides integration with 3rd party modules and the jCarousel library.
 */
use Drupal\Core\Asset;
use Drupal\Core\Template\Attribute;
use Drupal\jcarousel;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_help().
 */
function jcarousel_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.jcarousel':
      $details = [
        '#type' => 'details',
        '#title' => t('View sample code'),
        '#description' => t('The following HTML may be printed out to the page through a node, block, or in a custom template. Then the following PHP code must be run to add the jCarousel library and CSS to the page.'),
      ];

      $module_handler = \Drupal::moduleHandler();
      $renderer = \Drupal::service('renderer');

      $output .= '<p>' . t('The jCarousel module provides the ability to create carousel-style lists such as those included on this page. The jCarousel module includes integrations with other Drupal modules, but may also be used manually within your own theme or custom modules. It does not include any site-wide settings page or options, each carousel is separately configured.') . '</p>';

      $output .= '<h2>' . t('Views integration') . '</h2>';
      $output .= '<p>';
      $output .= t('Most configuration options for the jCarousel module are provided through <a href=":views">Views module</a>.',
        [':views' => $module_handler->moduleExists('views') ? \Drupal::url('help.page', ['name' => 'views']) : '#']
      );
      if ($module_handler->moduleExists('views_ui')) {
        $output .= ' ' . t('You may configure a new view through the <a href=":views-url">Views module interface</a>. After adding a new view, change its "Display style" to "jCarousel" and configure the remaining options there. When using the jCarousel display style with Views, you can construct any of the examples on this page as well as dynamically loaded carousels through AJAX requests.',
            [':views-url' => \Drupal::url('entity.view.collection')]
          );
      }
      elseif ($module_handler->moduleExists('views')) {
        $output .= ' ' . t('This site not have Views (or the Views UI module) installed currently. You may be able to turn on this module under your site\'s <a href="!modules-url">module page</a>, or you may have to <a href=":module">download Views module</a> and install it.',
            [':modules-url' => \Drupal::url('system.modules_list')]
          );
      }
      $output .= '</p>';

      $output .= '<h2>' . t('Custom implementations') . '</h2>';
      $output .= '<p>' . t("The following are demonstrations of jCarousel module when used directly by another module or your theme. <strong>Most users do not need to manually code carousels</strong> (building carousels using Views is the most common approach), but these demonstrations provide good examples of jCarousel's abilities.") . '</p>';

      $images = _jcarousel_help_image_list();
      $options = [
        'auto' => 2,
        'autoPause' => TRUE,
        'wrap' => 'circular',
        'responsive' => TRUE,
        'events' => [
          'jcarousel' => [
//            'jcarousel:create' => 'jcarousel.createCarousel',
          ],
        ],
      ];
      $jcourusel = _jcarousel_help_render_gen($images, $options);
      $output .= $renderer->render($jcourusel);

      // Provide the horizontal carousel demonstration.
      $output .= '<h3>' . t('Horizontal carousel') . '</h3>';
      $output .= '<p>' . t('This example uses <code>jcarousel_add()</code> directly with no options to create the default horizontal carousel.') . '</p>';
      $output .= $renderer->render($jcourusel);

      // @todo Properly implement.
      $list = '';
      $list_html = '<ul class="horizontalcarousel jcarousel-skin-default">' . $list . '</ul>';

      $sample = $details;
      $sample['sample'] = [
        '#type' => 'inline_template',
        '#template' => '<code><pre>{{ list_html }}</pre></code> {{ php_code|raw }}',
        '#context' => [
          'list_html' => $list_html,
          'php_code' => highlight_string("<?php jcarousel_add('horizontalcarousel'); ?>", TRUE),
        ]
      ];
      $output .= $renderer->render($sample);

      $output .= $list_html;
      jcarousel_add('horizontalcarousel');


      // Provide the vertical carousel demonstration.
      $output .= '<h3>' . t('Vertical carousel') . '</h3>';
      $output .= '<p>' . t('jCarousel can accept a variety of <a href=":url">configuration options</a> via the second argument to <code>jcarousel_add()</code>. In this example, we created a vertical carousel.', [
          ':url' => 'http://sorgalla.com/projects/jcarousel/#Configuration',
        ]) . '</p>';
      $list_html = '<ul class="verticalcarousel jcarousel-skin-default">' . $list . '</ul>';

      $images = _jcarousel_help_image_list();

      $item_lists = [];
      foreach ($images as $image) {
        $item_lists[] = [
          '#theme' => 'image',
          '#uri' => $image,
          '#width' => '150px',
          '#height' => '100px',
          '#alt' => t('Image alt'),
        ];
      }

      $jcourusel = [
        '#theme' => 'jcarousel',
        '#items' => $item_lists,
        '#options' => ['vertical' => true],
      ];
      $output .= $renderer->render($jcourusel);


      $sample = $details;
      $sample['sample'] = [
        '#type' => 'inline_template',
        '#template' => '<code><pre>{{ list_html }}</pre></code> {{ php_code|raw }}',
        '#context' => [
          'list_html' => $list_html,
          'php_code' => highlight_string("<?php jcarousel_add('verticalcarousel', ['vertical' => TRUE]); ?>", TRUE),
        ]
      ];
      $output .= $renderer->render($sample);

      $output .= $list_html;
      jcarousel_add('verticalcarousel', ['vertical' => TRUE]);

      // Provide the different skins carousel demonstration.
      $output .= '<h3>' . t('Different skins') . '</h3>';
      $list_html = '<ul class="differentskin jcarousel-skin-tango">' . $list . '</ul>';
      $output .= '<p>' . t('The "skin" of a carousel can be changed by setting the <code>$options[\'skin\']</code> property. This skin must match one of the skins either provided by a module or matching a skin included in your theme\'s style.css file. Skins are simply a class given to the HTML list with the name "jcarousel-skin-[skin-name]". A custom skin path may be specified in <code>$options[\'skin path\']</code>, or you can use one of these module-based skins:');
      $skins = jcarousel_skins();
      $items = [
        '#theme' => 'item_list',
        '#items' => array_keys($skins),
      ];
      $output .= $renderer->render($items);
      $output .= t('Note that with skins you will often need to override certain CSS styles in your theme\'s style.css file. Certain properties (like the height and width of individual items and the carousel itself) must be manually specified directly in CSS. Not using a skin at all by specifying <code>$options[\'skin\'] = NULL</code> and then styling the entire carousel in style.css is also a good approach.') . '</p>';

      $sample = $details;
      $sample['sample'] = [
        '#type' => 'inline_template',
        '#template' => '<code><pre>{{ list_html }}</pre></code> {{ php_code|raw }}',
        '#context' => [
          'list_html' => $list_html,
          'php_code' => highlight_string("<?php jcarousel_add('differentskin', ['skin' => 'tango']); ?>", TRUE),
        ]
      ];
      $output .= $renderer->render($sample);

      $output .= $list_html;
      jcarousel_add('differentskin', ['skin' => 'tango']);

      // Another thing you can do is use the theme('jcarousel') function.
      $output .= '<h3>' . t('Theme function') . '</h3>';

      $images = _jcarousel_help_image_list();

      $item_lists = [];
      foreach ($images as $image) {
        $item_lists[] = [
          '#theme' => 'image',
          '#uri' => $image,
          '#width' => '150px',
          '#height' => '100px',
          '#alt' => t('Image alt'),
        ];
      }

      $jcourusel = [
        '#theme' => 'jcarousel',
        '#items' => $item_lists,
      ];
      $output .= $renderer->render($jcourusel);


      $output .= '<p>' . t('The <code>theme(\'jcarousel\')</code> function allows you to easily create the markup and add all the JavaScript to the page in one function call. Like <code>jcarousel_add()</code> the theme function approach can also take options. In this example we create the carousel with the button next event being called when the mouse rolls over the buttons.') . '</p>';

      $details['#description'] = t('The following PHP code may be placed in a module to create a carousel.');

      $sample = $details;

      $code = "<?php
      \$output = '';
      \$renderer = \\Drupal::service('renderer');
       \$images = [
        'http://sorgalla.com/jcarousel/examples/_shared/img/img1.jpg',
        'http://sorgalla.com/jcarousel/examples/_shared/img/img2.jpg',
        'http://sorgalla.com/jcarousel/examples/_shared/img/img3.jpg',
        'http://sorgalla.com/jcarousel/examples/_shared/img/img4.jpg',
        'http://sorgalla.com/jcarousel/examples/_shared/img/img5.jpg',
        'http://sorgalla.com/jcarousel/examples/_shared/img/img6.jpg',
      ];
      \$items_list = [];
      foreach (\$images as \$image) {
        \$items_list[] = [
          '#theme' => 'image',
          '#uri' => \$image,
          '#width' => '150px',
          '#height' => '100px',
          '#alt' => t('Image alt'),
        ];
      }
      \$jcourusel = [
        '#theme' => 'jcarousel',
        '#items' => \$items_list,
      ];
      \$output .= \$renderer->render(\$jcourusel);\n?>";

      $sample['sample'] = [
        '#type' => 'inline_template',
        '#template' => '{{ php_code|raw }}',
        '#context' => [
          'php_code' => highlight_string($code, TRUE),
        ]
      ];
      $output .= $renderer->render($sample);
      $example = [
        '#theme' => 'jcarousel',
        '#items' => $items,
        '#options' => array(),
      ];
//      $output .= $renderer->render($example);

      // Provide a circular wrap element.
      $output .= '<h3>' . t('Circular wrap') . '</h3>';
      $output .= '<p>' . t('This example puts the carousel into a circular wrap.') . '</p>';


      $options = [
        'wrap' => 'circular',
      ];

      $sample = $details;
      $sample['sample'] = [
        '#type' => 'inline_template',
        '#template' => '{{ php_code|raw }}',
        '#context' => [
          'php_code' => highlight_string("<?php\n\$items = " . var_export($items, TRUE) . ";\n\$options = " . var_export($options, TRUE) . ";\nprint theme('jcarousel', ['items' => \$items, 'options' => \$options]);\n ", TRUE),
        ]
      ];
//      $output .= $renderer->render($sample);
      $example = [
        '#theme' => 'jcarousel',
        '#items' => $items,
        '#options' => $options,
      ];
//      $output .= $renderer->render($example);

  }
  return $output;
}

/**
 * Returns demo images.
 *
 * @return array
 *   An array of image URLs.
 */
function _jcarousel_help_image_list() {
  return [
    'http://sorgalla.com/jcarousel/examples/_shared/img/img1.jpg',
    'http://sorgalla.com/jcarousel/examples/_shared/img/img2.jpg',
    'http://sorgalla.com/jcarousel/examples/_shared/img/img3.jpg',
    'http://sorgalla.com/jcarousel/examples/_shared/img/img4.jpg',
    'http://sorgalla.com/jcarousel/examples/_shared/img/img5.jpg',
    'http://sorgalla.com/jcarousel/examples/_shared/img/img6.jpg',
  ];
}

/**
 * Builds carousel from image URLs.
 *
 * @param array $images
 *   Array of image URLs.
 * @param array $options
 *   The carousel options.
 *
 * @return array
 *   Renderable array of carousel.
 */
function _jcarousel_help_render_gen($images, $options = []) {
  $item_lists = [];
  foreach ($images as $image) {
    $item_lists[] = [
      '#theme' => 'image',
      '#uri' => $image,
      '#width' => '150px',
      '#height' => '100px',
      '#alt' => t('Image alt'),
    ];
  }

  return [
    '#theme' => 'jcarousel',
    '#items' => $item_lists,
    '#options' => $options,
  ];
}




/**
 * Implements hook_menu().
 */
//function jcarousel_menu() {
//  $items['jcarousel/ajax/views'] = array(
//    'page callback' => 'jcarousel_views_ajax',
//    'access callback' => TRUE,
//    'file' => 'includes/jcarousel.views.inc',
//    'type' => MENU_CALLBACK,
//  );
//  return $items;
//}

/**
 * Implements hook_theme().
 */
function jcarousel_theme() {
  return [
    'jcarousel' => [
      'variables' => [
        'items' => [],
        'options' => [],
        'identifier' => NULL,
      ],
    ],
  ];
}

/**
 * Adds all the necessary CSS and JS necessary for building a carousel.
 *
 * @param $class_name
 *   (optional) The class on the UL list to identify this carousel. If ommitted,
 *   only the jCarousel library will be added to the page.
 * @param array $options
 *   (optional) A list of settings to be passed to jCarousel.
 * @param bool $add
 *   Whether to add the JavaScript and CSS to the page with drupal_add_js().
 *
 * @return
 *   An array of JS and CSS files, suitable for inclusion as an #attached array.
 */
function jcarousel_add($class_name = NULL, $options = [], $add = TRUE) {
  static $library_added;

  // Add the jCarousel library and any global settings.
  $attachments['library'][] = 'jcarousel/jcarousel';

  if (isset($class_name)) {
    // Set default options.
    $options += [
      'skin' => 'default',
      'selector' => '.' . $class_name,
    ];
    if (!empty($options['skin'])) {
      $attachments['library'][] = 'jcarousel/skin.' . $options['skin'];
    }

    // Allow other modules to modify these settings.
    \Drupal::moduleHandler()->alter('jcarousel_options', $options, $class_name);

    // Add settings for this individual carousel.
    if (!isset($library_added[$class_name]) || !$add) {
      $library_added[$class_name] = TRUE;

      // Add the JavaScript settings for this carousel.
      $js_settings = [
        'jcarousel' => [
          'carousels' => [
            $class_name => $options,
          ],
        ],
      ];

      $attachments['drupalSettings'] = $js_settings;
    }
  }

  return $attachments;
}

/**
 * Returns a list of all available jCarousel skins.
 *
 * @return array
 *   Keyed array of skins.
 */
function jcarousel_skins() {
  return \Drupal::service('jcarousel.skins.manager')->getDefinitions();
}

/**
 * Implements hook_library_info_alter().
 *
 * Add skins as libraries.
 */
function jcarousel_library_info_alter(&$libraries, $extension) {
  if ($extension == 'jcarousel') {
    $skins = \Drupal::service('jcarousel.skins.manager')->getDefinitions();
    foreach ($skins as $key => $data) {
      $libraries["skin.$key"] = [
        'version' => 'VERSION',
        'css' => [
          'theme' => [
            $data['file'] => [],
          ],
        ],
      ];
    }
  }
}

/**
 * Preprocess function for jcarousel.html.twig.
 */
function template_preprocess_jcarousel(&$variables) {
  // Set default options.
  $variables['options'] += [
    'skin' => 'default',
    'scroll' => 1,
    'vertical' => 0,
    'navigation' => 'after',
    'visible' => 4,
  ];

  $options = $variables['options'];

  // Add the jCarousel library and any global settings.
  $variables['#attached']['library'][] = 'jcarousel/jcarousel';

  // Allow other modules to modify these settings.
  \Drupal::moduleHandler()->alter('jcarousel_options', $options, $class_name);

  if (!empty($options['skin'])) {
    $variables['#attached']['library'][] = 'jcarousel/skin.' . $options['skin'];
  }


//    // Add settings for this individual carousel.
//    if (!isset($library_added[$class_name]) || !$add) {
//      $library_added[$class_name] = TRUE;
//
//      // Add the JavaScript settings for this carousel.
//      $js_settings = [
//        'jcarousel' => [
//          'carousels' => [
//            $class_name => $options,
//          ],
//        ],
//      ];
//
//      $attachments['drupalSettings'] = $js_settings;
//    }
//    NestedArray::mergeDeep($view->element['#attached'], $attachments);

//  $settings = $attachments['drupalSettings']['jcarousel']['carousels'];
//  $key = key($settings);

  $variables['options'] = $options;
  unset($variables['attributes']);
  $variables += _jcarousel_generate_attributes($variables['items'], $variables['options']);

}


/**
 * Helper to build attributes array for carousel items.
 *
 * @param array $items
 *   The carousel items.
 * @param array $options
 *   The options for carousel.
 *
 * @return array
 *   An array of attributes.
 */
function _jcarousel_generate_attributes($items, $options) {
  $attributes = [];
  $attributes['attributes'] = new Attribute();
  $attributes['attributes_wrapper'] = new Attribute();
  $attributes['attributes_previous'] = new Attribute();
  $attributes['attributes_next'] = new Attribute();
  $attributes['attributes_content'] = new Attribute();

  // Build the list of classes for the carousel.
  $attributes['attributes']->addClass('jcarousel');
  $attributes['attributes']->setAttribute('data-jcarousel', 'true');

  // scroll all visible elements at a time if scroll = 'auto'
  $scroll = !empty($options['scroll']) ? $options['scroll'] : $options['visible'];

  if ($options['auto'] > 0 && $options['autoPause'] && empty($options['events']['jcarousel']['jcarousel:createend'])) {
    $options['events']['jcarousel']['jcarousel:createend'] = 'jcarousel.autoPauseCallback';
    $attributes['attributes']->setAttribute('data-autoscroll-interval', $options['auto'] * 1000);
    $attributes['attributes']->setAttribute('data-autoscroll-autostart', 'true');
    $attributes['attributes']->setAttribute('data-autoscroll-target', '+=' . $scroll);
  }

  if ($options['responsive'] && empty($options['events']['jcarousel']['jcarousel:reload'])) {
    $options['vertical'] = FALSE;
    unset($options['visible']);
    $options['events']['jcarousel']['jcarousel:reload'] = 'jcarousel.reloadCallback';
  }

  if (!empty($options['events']['jcarousel'])) {
    $attributes['attributes']->setAttribute('data-events', Json::encode($options['events']['jcarousel']));
  }

  if ($options['wrap']) {
    $attributes['attributes']->setAttribute('data-wrap', $options['wrap']);
  }
  if ($options['vertical']) {
    $attributes['attributes']->setAttribute('data-vertical', 'true');
  }

  $orientation = !empty($options['vertical']) && $options['vertical'] ? 'vertical' : 'horizontal';

  $attributes['attributes_wrapper']->addClass('jcarousel-wrapper');

  if ($options['visible']) {
    $attributes['attributes_wrapper']->addClass('jcarousel-visible-' . $options['visible']);
  }

  if (!empty($options['skin'])) {
    $attributes['attributes_wrapper']->addClass('jcarousel-skin-' . $options['skin']);
  }

  $attributes['attributes_content']->addClass('jcarousel-container-' . $orientation);

  $attributes['attributes_previous']->setAttribute('data-jcarousel-control', 'true');
  if (!empty($options['events']['jcarouselcontrol'])) {
    $attributes['attributes_previous']->setAttribute('data-events', Json::encode($options['events']['jcarouselcontrol']));
  }
  $attributes['attributes_previous']->setAttribute('data-target', '-=' . $scroll);
  $attributes['attributes_previous']->addClass('jcarousel-control-prev');

  $attributes['attributes_next']->setAttribute('data-jcarousel-control', 'true');
  if (!empty($options['events']['jcarouselcontrol'])) {
    $attributes['attributes_next']->setAttribute('data-events', Json::encode($options['events']['jcarouselcontrol']));
  }
  $attributes['attributes_next']->setAttribute('data-target', '+=' . $scroll);
  $attributes['attributes_next']->addClass('jcarousel-control-next');

  $attributes['attributes_wrapper']->addClass('jcarousel-' . $orientation);

  // Give each item a class to identify where in the carousel it belongs.
  foreach ($items as $id => $row) {
    $row_attribute = new Attribute();
    $attributes['attributes_row'][$id] = $row_attribute;
  }

  return $attributes;
}

/**
 * Implements hook_page_attachments().
 */
function jcarousel_page_attachments(&$page) {
  $jcarousel_global_load = \Drupal::config('jcarousel.settings')->get('global_load');
  if ($jcarousel_global_load) {
    $options = [
      'skin' => 'default',
      'scroll' => 1,
      'vertical' => 0,
      'navigation' => 'after',
    ];
    // Add the jCarousel library and any global settings.
    $page['#attached']['library'][] = 'jcarousel/jcarousel';

    // Allow other modules to modify these settings.
    \Drupal::moduleHandler()->alter('jcarousel_options', $options, $class_name);

    $skins = jcarousel_skins();

    foreach ($skins as $id => $skin) {
      $variables['#attached']['library'][] = 'jcarousel/skin.' . $id;
    }

    $js_settings = [
//    'ajaxPath' => Url::fromRoute('jcarousel.ajax.views')->toString(),
    ];
    $page['#attached']['drupalSettings']['jcarousel'] = $js_settings;
  }
}